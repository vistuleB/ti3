|> Sub
    title=Wahrheitstabellen, CNF, DNF

    Wir haben gesehen, dass jeder Schaltkreis eine Boolesche Funktion berechnet. In diesem Abschnitt wollen wir zeigen, dass es umgekehrt auch gilt: zu jeder Booleschen Funktion gibt es einen Schaltkreis (ja: viele Schaltkreise), die sie berechnen. Wir werden insgesamt drei Konstruktionen sehen. Als erstes lassen Sie uns überlegen, wie man eine Boolesche Funktion im Allgemeinen aufschreibt/codiert. Beschränken wir uns erst einmal auf Boolesche Funktionen mit _einem_ Ausgabewert, also $f : \{0,1\}^{n} \to \{0,1\}$.
    
    Dies ist ein endliches Objekt, wir können es also codieren, indem wir für jeden Eingabewert $(x_1, \ldots, x_n)$ den Ausgabewert angeben. Dies nennt man eine _Wahrheitstabelle_ (englisch _truth table_). Hier sehen Sie ein Beispiel:
    
    $$
    \begin{array}{ccc|c}
    x & y & z & f \\ \hline
    0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 1 \\
    0 & 1 & 0 & 1 \\
    0 & 1 & 1 & 1 \\
    1 & 0 & 0 & 1 \\
    1 & 0 & 1 & 1 \\
    1 & 1 & 0 & 0 \\
    1 & 1 & 1 & 1 \\
    \end{array}
    $$
    
    Wie können wir von so einer Tabelle ausgehend einen Schaltkreis bauen, der diese Funktion berechnet? Ich stelle Ihnen drei Herangehensweisen vor. 
     
    |> h3    
        Rekursiv, top-down
    
    Wir teilen die Tabelle in die obere Hälfte (wo $x = 0$ gilt) und die untere Hälfte:
    
    $$
    \begin{align*}
    \color{red}{
    \begin{array}{ccc|c}
    x & y & z & f \\\hline
    0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 1 \\
    0 & 1 & 0 & 1 \\
    0 & 1 & 1 & 1
    \end{array}
    }\\
    \color{blue}{
    \begin{array}{ccc|c}
    1 & 0 & 0 & 1 \\
    1 & 0 & 1 & 1 \\
    1 & 1 & 0 & 0 \\
    1 & 1 & 1 & 1\\
    \end{array}
    }
    \end{align*}
    $$
    
    Die obere, roten Hälfte kommt Ihnen vielleicht bekannt vor: es ist genau die Wahrheitstabelle von $y \vee z$. Der Wert von $x$ ist im roten Teil ja immer $0$, also ist die obere Hälfte im Prinzip eine Funktion mit zwei Variablen: $y$ und $z$; wir sagen also mal, die obere Hälfte "ist" 
    |> span
        style=color:red
        $y \vee z$
    . Die untere Hälfte besteht auch aus drei Einsen und einer Null, allerdings ist die Null mittendrin. Überprüfen Sie es, wenn ich Ihnen sage, dass die untere Hälfte 
    |> span 
        style=color:blue
        $\bar{y} \vee z$ 
    ist (ich schreibe im Fließtext übrigens gerne $\bar{y}$ statt $\neg y$, weil das mir lesbarer erscheint). Insgesamt also:
    
    f = `if` $x$ `then` $\bar{y} \vee z$ `else` $y \vee z$
    
    Jetzt können wir das mit unserem if-then-else-Schaltkreis kombinieren.
    
    |> Exercise
    
        Führen Sie die Konstruktion zu Ende, indem Sie $\bar{y} \vee z$ und $y \vee z$ mit dem if-then-else-Schaltkreis kombinieren.
    
    Können wir das mit beliebigen Funktionen machen? Ja klar! Wir gehen wie folgt vor:
    
    |> ol
        |> li
            Teile die Tabelle in die oberen $2^{n-1}$ Zeilen (für die $x_1 = 0$ gilt) und die unteren $2^{n-1}$ Zeilen (für die $x_1 = 1$ gilt) auf.
        
        |> li
            Jede Hälfte kann als Boolesche Funktion mit $n-1$ Variablen betrachtet werden. Bauen Sie rekursiv Schaltkreise $C_0$ für die obere und $C_1$ für die untere Hälfte, beide mit Input-Variablen $x_2,\dots,x_n$.
        
        |> li
            Kombinieren Sie diese via `if` $x_1$ `then` $C_1$ `else` $C_0$, zu einem Schaltkreis für $f$ mit insgesamt $n$ Input-Variablen.
    
    An dieser Stelle zahlt es sich aus, eine formale Notation einzuführen: 
     
    |> Definition
        
        Sei $f: \{0,1\}^n \rightarrow \{0,1\}$ eine Boolesche Funktion, $i \in \{1,\dots,n\}$ ein Index und $b \in \{0,1\}$ ein Wert. Dann ist $f|_{x_i=b}$ eine neue Funktion, und zwar
        
        $$
        \begin{align*}
        f|_{x_i=b} &: \{0,1\}^{n-1} \rightarrow \{0,1\} \\
        (x_1,\dots,x_{i-1}, x_{i+1}, \dots, x_n) &\mapsto f(x_1,\dots,x_{i-1}, b, x_{i+1}, \dots, x_{n}).
        \end{align*}
        $$
       
        In Worten: wir fixieren den $i$-ten Input auf den Wert $b$ und erhalten eine Funktion in den restlichen $n-1$ Variablen.
       
    Das Ergebnis ist im Allgemeinen sehr groß, aber was erwarten Sie bei einer Tabelle mit $2^n$ Zeilen?
    
    |> Exercise
        test=test
        
        Führen Sie das rekursive Verfahren durch, um für die folgende Funktion auf 4 Variablen einen Schaltkreis zu bauen: 
        
        $$
        \begin{array}{cccc|c}
        u & x & y & z & f \\ \hline
        0 & 0 & 0 & 0 & 1 \\
        0 & 0 & 0 & 1 & 1 \\
        0 & 0 & 1 & 0 & 1 \\
        0 & 0 & 1 & 1 & 0 \\
        0 & 1 & 0 & 0 & 1 \\
        0 & 1 & 0 & 1 & 0 \\
        0 & 1 & 1 & 0 & 1 \\
        0 & 1 & 1 & 1 & 0 \\ \hline
        1 & 0 & 0 & 0 & 0 \\
        1 & 0 & 0 & 1 & 0 \\
        1 & 0 & 1 & 0 & 1 \\
        1 & 0 & 1 & 1 & 1 \\
        1 & 1 & 0 & 0 & 1 \\
        1 & 1 & 0 & 1 & 1 \\
        1 & 1 & 1 & 0 & 0 \\
        1 & 1 & 1 & 1 & 0 \\
        \end{array}
        $$
        
    |> h3
        Bottom-Up, als DNF
    
    Wenn Sie Rekursionshasser sind und generell lieber in `for` -Schleifen denken, dann wird die nächste Konstruktion mehr nach Ihrem Geschmack sein. Im Prinzip werden wir alle Kombinationen der Variablen auflisten, für die die Funktion 1 ausgibt. Stellen Sie sich vor, wir haben drei Variable $x,y,z$ und einen AND-Ausdruck, der jede Variable oder deren Negation enthält, also zum Beispiel
    
    $$
    x \wedge \bar{y} \wedge z \ .
    $$
    
    Von den 8 möglichen Input-Tupeln gibt es nur eins, für das dieser Ausdruck eine 1 ausgibt, in diesem Falle $(1,0,1)$. Wir werden nun also für jede 1-Zeile unserer Wahrheitstabelle einen solchen Ausdruck hinschreiben und diese dann in einem großen OR zusammenführen. Einen Ausdruck, der aus einem AND von Variablen oder deren Negation besteht, nennt man auch einen Term.
    
    $$
    \begin{array}{ccc|c|c}
    x & y & z & f & \text{Term} \\ \hline
    0 & 0 & 0 & 0 & \\
    0 & 0 & 1 & 1 & \bar{x} \wedge \bar{y} \wedge z \\
    0 & 1 & 0 & 1 & \bar{x} \wedge y \wedge \bar{z} \\
    0 & 1 & 1 & 1 & \bar{x} \wedge y \wedge z \\
    1 & 0 & 0 & 1 & x \wedge \bar{y} \wedge \bar{z} \\
    1 & 0 & 1 & 1 & x \wedge \bar{y} \wedge z \\
    1 & 1 & 0 & 0 & \\
    1 & 1 & 1 & 1 & x \wedge y \wedge z \\
    \end{array}
    $$
    
    Mit einem großen OR zusammengeführt ergibt das dann
    
    |> figure
        |> img
            style=height:10em
            src=img/circuits/dnf-example.svg
            loading=lazy
            
    In diesem Schaltkreis habe ich die Input-Knoten mehrfach aufgeführt und die NOT-Gates nicht explizit aufgeführt, damit kein "Kabelsalat" entsteht. Beachten Sie auch, das jedes Gate (außer den Input-Gates) genau _eine_ ausgehende Kante hat. Konkret bedeutet dies, dass man diesen Schaltkreis als logische Formel hinschreiben kann:
    
    $$
    (\bar{x} \wedge \bar{y} \wedge z)
    \vee (\bar{x} \wedge y \wedge \bar{z})
    \vee (\bar{x} \wedge y \wedge z)
    \vee (x \wedge \bar{y} \wedge \bar{z})
    \vee (x \wedge \bar{y} \wedge z)
    \vee (x \wedge y \wedge z)
    $$
    
    |> Definition
    
        Ein _Literal_ ist eine Variable $x$ oder deren Negation $\bar{x}$. Ein _Term_ ist ein AND (auch: Konjunktion) von Literalen (beispielsweise $\bar{x} \wedge \bar{y} \wedge z)$. Eine Formel in _disjunktiver Normalform_ (DNF) ist ein OR von Termen.
        
        Alternativ: eine DNF ist ein Schaltkreis der Tiefe 2 (wobei NOT-Gates nicht mitzählen), dessen Output-Gate ein OR-Gate ist.
    
    |> Exercise
    
        Was, wenn einige der "mittleren" Gates (auf Tiefe 1) keine AND-Gates sind, sondern auch OR-Gates? Dann wäre dies nach der ersten Definition _keine_ DNF-Formel, nach der zweiten aber schon. Zeigen Sie, wie man OR-Gates auf Ebene 1 entfernen kann! Als konkretes Beispiel:
        
        |> figure
            |> img
                style=height:10em
                src=img/circuits/dnf-dirty.svg
                loading=lazy
    
    |> h3
        Bottom-Up, als CNF
    
    Zu der eben demonstrierten Konstruktion gibt es noch eine weitere, dazu duale Konstruktion. Bildlich gesprochen listet DNF-Konstruktion alle Möglichkeiten auf, wie man eine 1 erhalten kann. Dual dazu können wir alle Möglichkeiten auflisten, wie man eine 0 erhalten kann; tritt _keine_ davon ein, muss wohl eine 1 herauskommen. Wir gehen also in der Wahrheitstabelle alle Zeilen mit Wert 0 durch und schreiben einen Ausdruck, der genau diese Zeile verbietet. So kann man den Ausdruck $(\bar{x} \vee \bar{y} \vee z)$ verstehen als " $(x,y,z)$ darf nicht $(1,1,0)$ sein." An dem obigen Beispiel ergibt dies:
    
    $$
    \begin{array}{ccc|c|c}
    x & y & z & f & \text{Term} \\ \hline
    0 & 0 & 0 & 0 & x \vee y \vee z \\
    0 & 0 & 1 & 1 & \\
    0 & 1 & 0 & 1 & \\
    0 & 1 & 1 & 1 & \\
    1 & 0 & 0 & 1 & \\
    1 & 0 & 1 & 1 & \\
    1 & 1 & 0 & 0 & \bar{x} \vee \bar{y} \vee z \\
    1 & 1 & 1 & 1 & \\
    \end{array}
    $$
    
    Einen Ausdruck der Form $\bar{x} \vee \bar{y} \vee z$, also ein OR von Literaten, nennt man auch eine _Klausel_. Eine Klausel mit $n$ (hier: $n=3$) Literaten verbietet genau ein Tupel von Wahrheitswerten. Wenn wir also alle Verbote mit AND verknüpfen, erhalten wir
    
    |> figure
        |> img
            style=height:10em
            src=img/circuits/cnf-example.svg
            loading=lazy
    
    |> Definition
        
        Eine Formel in _konjunktiver Normalform_ (CNF) ist ein AND von Klauseln.
        
        Alternativ: eine CNF-Formel ist ein Schaltkreis der Tiefe 2 (wobei NOT-Gates nicht mitzählen), dessen Output-Gate ein AND-Gate ist. 
        
    In diesem konkreten Beispiel ist die CNF viel kürzer als die DNF (das ist Zufall; ich habe meine Tabelle mit Zufallswerten erzeugt). Allerdings können wir, ausgehend von der "rohen" DNF (oder CNF), diese noch nachträglich bearbeiten und kleiner machen. Zum Beispiel können wir "nebeneinanderstehende" Terme zu einem einzigen zusammenziehen, z.B. : 
    
    $$
    (\bar{x} \wedge y \wedge \bar{z}) \vee (\bar{x} \wedge y \wedge z) \equiv \bar{x} \wedge y \ .
    $$
    
    |> Exercise
    
        Minimieren Sie die obige DNF (die mit den 6 Termen), indem Sie gewisse Paare von Termen zu einem kürzeren zusammenfassen.
        
    |> Exercise
    
        Zeigen Sie, dass es zu jeder Booleschen Funktion $f: \{0,1\}^n \rightarrow \{0,1\}$ eine äquivalente DNF-Formel mit höchstens $2^{n-1}$ Termen gibt.
        
    |> Exercise
    
        Zeigen Sie, dass jede DNF-Formel für die Boolesche Funktion $x_1 \oplus \dots \oplus x_n$ genau $2^{n-1}$ Terme besitzen muss.
    
    Sie haben eventuell von Methoden zur Minimierung von DNFs bzw. CNFs oder Schaltkreisen im Allgemeinen gehört, z.B. Karnaugh-Diagramme. Dies sind _Heuristiken_, die hilfreich sind, aber nicht garantieren können, eine optimale Lösung zu finden (es sind also keine _Algorithmen_ in dem Sinne). Die genaue Komplexität dieser Optimierungsprobleme ist in der Tat Gegenstand aktiver Forschung,
    
    |> ol
        |> li
            Wenn die Funktion (1) bereits als _Boolesche Formel_ vorliegt (also Schaltkreise, in denen außer den Eingabe-Gates alle Gates nur eine ausgehende Kante haben), so ist das Minimierungsproblem $Sigma_2^{P}$-vollständig, siehe 
            |> a 
                href=http://users.cms.caltech.edu/~umans/papers/BU07.pdf
                Buchfuhrer, David; Umans, Christopher (January 2011), The complexity of Boolean formula minimization (JCSS 2011).
        |> li
            Wenn die Funktion (2) als Tabelle gegeben ist, dann ist die genaue Komplexität nicht genau bekannt. Es hat in den letzten Jahren Fortschritte gegeben (die nahelegen, dass das Problem tatsächlich schwierig ist), z.B. 
            |> a
                href=https://drops.dagstuhl.de/opus/volltexte/2020/12574/pdf/LIPIcs-CCC-2020-22.pdf
                Ilango, Loff, and Oliveira. NP-Hardness of Circuit Minimization for Multi-Output Functions, (CCC 2020).
    
    Beachten Sie, dass (2) algorithmisch einfacher ist: durch die "verschwenderische" Darstellung der Funktion als Tabelle ist bereits der Input sehr groß ( Bits), sodass ein Algorithmus, der hier versucht, zu minimieren, bereits ein großes "Zeitbudget" hat. Dennoch ist das Problem höchstwahrscheinlich schwierig.
